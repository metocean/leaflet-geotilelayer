// Generated by CoffeeScript 1.9.2
var request;

request = require('superagent');

L.GeoTileLayer = L.GridLayer.extend({
  options: {
    maxZoom: 18
  },
  initialize: function(url, options) {
    this._url = url;
    this._requests = {};
    this._geoCache = {};
    options = L.setOptions(this, options);
    return this.on('tileunload', function(e) {
      var params, ref;
      params = this._generateParams(e.coords);
      if (this._requests[params.url] != null) {
        this._requests[params.url].abort();
        delete this._requests[params.url];
      }
      if (options.unload != null) {
        return options.unload.call(this, e.tile, params, (ref = this._geoCache[params.url]) != null ? ref : null);
      }
    });
  },
  _update: function(center) {
    if (this.options.update != null) {
      this.options.update.call(this);
    }
    return L.GridLayer.prototype._update.call(this, center);
  },
  _generateParams: function(coords) {
    var params, requestparams;
    params = {
      x: coords.x,
      y: coords.y,
      z: coords.z
    };
    requestparams = {
      x: params.x,
      y: params.y,
      z: params.z
    };
    while (requestparams.z > this.options.zoom) {
      requestparams.x = Math.floor(requestparams.x / 2);
      requestparams.y = Math.floor(requestparams.y / 2);
      requestparams.z -= 1;
    }
    params.url = L.Util.template(this._url, requestparams);
    params.size = this.getTileSize();
    params.key = params.x + "," + params.y + "," + params.z;
    return params;
  },
  createTile: function(coords, done) {
    var geo, layer, params, tile;
    params = this._generateParams({
      x: coords.x,
      y: coords.y,
      z: this._tileZoom
    });
    layer = this;
    tile = document.createElement('span');
    if (this._geoCache[params.url] != null) {
      geo = this._geoCache[params.url];
      layer.options.render.call(this, tile, params, geo);
      setTimeout(function() {
        return done(null, tile);
      }, 1);
    } else {
      this._requests[params.url] = request.get(params.url).set('Accept', 'application/json').end(function(err, res) {
        delete layer._requests[params.url];
        if (err != null) {
          return done(err, tile);
        }
        layer._geoCache[params.url] = res.body;
        layer.options.render.call(layer, tile, params, res.body);
        return done(null, tile);
      });
    }
    return tile;
  }
});

module.exports = function(url, options) {
  return new L.GeoTileLayer(url, options);
};
